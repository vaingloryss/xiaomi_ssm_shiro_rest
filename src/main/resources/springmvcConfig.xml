<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
  http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
  http://www.springframework.org/schema/mvc
  http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
  http://www.springframework.org/schema/context
  http://www.springframework.org/schema/context/spring-context-4.3.xsd
  http://www.springframework.org/schema/aop
  http://www.springframework.org/schema/aop/spring-aop.xsd">
    <!--配置控制器扫描器-->
    <context:component-scan base-package="com.vainglory.controller"/>
    <!--加载注解驱动-->
    <mvc:annotation-driven>
        <!--消息转换器,将String类型转换为Json类型，同时可以指定编码格式，解决responseBody返回中外乱码问题，替代RequestMapping的produces属性-->
        <!--配置一个媒体类型-->
        <!--
        <mvc:message-converters register-defaults="true">
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <property name="supportedMediaTypes" value="text/plain;charset=UTF-8" />
            </bean>
        </mvc:message-converters>
        -->
        <!--配置多个媒体类型-->
        <mvc:message-converters>
            <!--SpringMVC的消息转换器，使用Jackson实现-->
            <bean class="org.springframework.http.converter.StringHttpMessageConverter" >
                <property name = "supportedMediaTypes">
                    <list>
                        <value>application/json;charset=utf-8</value>
                        <value>text/html;charset=utf-8</value>
                        <value>application/x-www-form-urlencoded</value>
                    </list>
                </property>
            </bean>

            <!--配置FastJson的转换器-->
            <bean class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">
                <property name="supportedMediaTypes">
                    <list>
                        <!--<value>APPLICATION_JSON</value>-->
                        <!--<value>APPLICATION_JSON_UTF8</value>-->
                        <value>application/json;charset=utf-8</value>
                    </list>
                </property>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>

    <!--配置默认的Servlet-->
    <mvc:default-servlet-handler/>

    <!-- 静态资源放行 -->
<!--
    <mvc:resources location="/css/" mapping="/css/**"/>
    <mvc:resources location="/js/" mapping="/js/**"/>
    <mvc:resources location="/image/" mapping="/image/**"/>
    <mvc:resources location="/goodsImg/" mapping="/goodsImg/**"/>
    <mvc:resources location="/fonts/" mapping="/fonts/**"/>-->
    <!--配置试图解析器-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>
    </bean>
    <!--文件上传解析器-->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!--文件最大大小限制-->
        <property name="maxUploadSize" value="10485760"/>
    </bean>

    <!--配置拦截器-->
<!--    <mvc:interceptors>
        <mvc:interceptor>
            <mvc:mapping path="/userController/toHome"/>
            &lt;!&ndash;<mvc:exclude-mapping path=""/>&ndash;&gt;
            <bean class="com.vainglory.interceptor.AutoLoginInterceptor"/>
        </mvc:interceptor>
    </mvc:interceptors>-->

    <!--开启shiro注解支持-->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
    <!--自动代理生成器，等价于aop:config;
    aop:config 或 AutoProxyCreator两者选其一，spring官方提醒千万不要同时使用。-->
<!--
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor"/>
-->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor">
        <property name="proxyTargetClass" value="true" />
    </bean>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>

    <!--<aop:config/>-->
    <!-- 在此bean的构建过程中，初始化了一些额外功能和piontcut
     interceptors.add(new RoleAnnotationMethodInterceptor(resolver));
     interceptors.add(new PermissionAnnotationMethodInterceptor(resolver));
     interceptors.add(new AuthenticatedAnnotationMethodInterceptor(resolver));
     interceptors.add(new UserAnnotationMethodInterceptor(resolver));
     interceptors.add(new GuestAnnotationMethodInterceptor(resolver));
-->
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>

    <!--配置异常解析器-->
    <bean class="com.vainglory.resolver.MyExceptionResolver"/>

</beans>